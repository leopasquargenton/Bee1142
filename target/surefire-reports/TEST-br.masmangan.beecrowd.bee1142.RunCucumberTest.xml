<?xml version="1.0" encoding="UTF-8" ?>
<testsuite tests="6" failures="0" name="br.masmangan.beecrowd.bee1142.RunCucumberTest" time="0.412" errors="3" skipped="0">
  <properties>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="java.vm.version" value="17.0.2+8"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin"/>
    <property name="maven.multiModuleProjectDirectory" value="C:\Users\lpasq\PUCRS\2022 - 2º Semestre\Métodos e Modelos\T1\java-cucumber"/>
    <property name="java.vm.vendor" value="Eclipse Adoptium"/>
    <property name="java.vendor.url" value="https://adoptium.net/"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="path.separator" value=";"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="user.script" value=""/>
    <property name="user.country" value="BR"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="C:\Users\lpasq\PUCRS\2022 - 2º Semestre\Métodos e Modelos\T1\java-cucumber"/>
    <property name="java.vm.compressedOopsMode" value="32-bit"/>
    <property name="java.runtime.version" value="17.0.2+8"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="C:\Users\lpasq\AppData\Local\Temp\"/>
    <property name="line.separator" value="
"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="user.variant" value=""/>
    <property name="os.name" value="Windows 11"/>
    <property name="classworlds.conf" value="C:\maven\bin\m2.conf"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\dotnet\;C:\Program Files\Git\cmd;C:\Program Files\nodejs\;C:\maven\bin;C:\Users\lpasq\AppData\Local\Microsoft\WindowsApps;C:\Users\lpasq\.dotnet\tools;C:\Users\lpasq\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\lpasq\AppData\Roaming\npm;."/>
    <property name="maven.conf" value="C:\maven/conf"/>
    <property name="jdk.debug" value="release"/>
    <property name="java.class.version" value="61.0"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="os.version" value="10.0"/>
    <property name="library.jansi.path" value="C:\maven\lib\jansi-native"/>
    <property name="user.home" value="C:\Users\lpasq"/>
    <property name="user.timezone" value="America/Sao_Paulo"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.specification.version" value="17"/>
    <property name="user.name" value="lpasq"/>
    <property name="java.class.path" value="C:\maven\boot\plexus-classworlds-2.6.0.jar"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher test"/>
    <property name="java.home" value="C:\Program Files\Eclipse Adoptium\jdk-17.0.2.8-hotspot"/>
    <property name="user.language" value="pt"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.version" value="17.0.2"/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.vendor" value="Eclipse Adoptium"/>
    <property name="sun.stderr.encoding" value="cp850"/>
    <property name="maven.home" value="C:\maven"/>
    <property name="file.separator" value="\"/>
    <property name="java.version.date" value="2022-01-18"/>
    <property name="java.vendor.url.bug" value="https://github.com/adoptium/adoptium-support/issues"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="java.vendor.version" value="Temurin-17.0.2+8"/>
    <property name="sun.stdout.encoding" value="cp850"/>
    <property name="sun.cpu.isalist" value="amd64"/>
  </properties>
  <testcase classname="Pum" name="Generate a PUM example like BeeCrowd 1142 #1" time="0.335">
    <error message="The step &apos;result should be 1 2 3 PUM&apos; is undefined.
You can implement this step using the snippet(s) below:

@Then(&quot;result should be {int} {int} {int} PUM&quot;)
public void result_should_be_pum(Integer int1, Integer int2, Integer int3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
" type="io.cucumber.junit.UndefinedStepException">io.cucumber.junit.UndefinedStepException: The step &apos;result should be 1 2 3 PUM&apos; is undefined.
You can implement this step using the snippet(s) below:

@Then(&quot;result should be {int} {int} {int} PUM&quot;)
public void result_should_be_pum(Integer int1, Integer int2, Integer int3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

</error>
    <system-out>
@domain
Scenario Outline: Generate a PUM example like BeeCrowd 1142 &amp;#27;[90m# br/masmangan/beecrowd/bee1142/Pum.feature:38&amp;#27;[0m
  &amp;#27;[32mGiven &amp;#27;[0m&amp;#27;[32mA number of output lines &amp;#27;[0m&amp;#27;[32m&amp;#27;[1m1&amp;#27;[0m                          &amp;#27;[90m# br.masmangan.beecrowd.bee1142.PumSteps.number_is(int)&amp;#27;[0m
  &amp;#27;[32mWhen &amp;#27;[0m&amp;#27;[32mPum is calculated&amp;#27;[0m                                    &amp;#27;[90m# br.masmangan.beecrowd.bee1142.PumSteps.pum_is_calculated()&amp;#27;[0m
  &amp;#27;[33mThen &amp;#27;[0m&amp;#27;[33mresult should be 1 2 3 PUM&amp;#27;[0m                           &amp;#27;[90m# null&amp;#27;[0m
</system-out>
  </testcase>
  <testcase classname="Pum" name="Generate a PUM example like BeeCrowd 1142 #2" time="0.022">
    <error message="The step &apos;result should be 1 2 3 PUM 5 6 7 PUM 9 10 11 PUM 13 14 15 PUM 17 18 19 PUM 21 22 23 PUM 25 26 27 PUM&apos; is undefined.
You can implement this step using the snippet(s) below:

@Then(&quot;result should be {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM&quot;)
public void result_should_be_pum_pum_pum_pum_pum_pum_pum(Integer int1, Integer int2, Integer int3, Integer int4, Integer int5, Integer int6, Integer int7, Integer int8, Integer int9, Integer int10, Integer int11, Integer int12, Integer int13, Integer int14, Integer int15, Integer int16, Integer int17, Integer int18, Integer int19, Integer int20, Integer int21) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
" type="io.cucumber.junit.UndefinedStepException">io.cucumber.junit.UndefinedStepException: The step &apos;result should be 1 2 3 PUM 5 6 7 PUM 9 10 11 PUM 13 14 15 PUM 17 18 19 PUM 21 22 23 PUM 25 26 27 PUM&apos; is undefined.
You can implement this step using the snippet(s) below:

@Then(&quot;result should be {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM&quot;)
public void result_should_be_pum_pum_pum_pum_pum_pum_pum(Integer int1, Integer int2, Integer int3, Integer int4, Integer int5, Integer int6, Integer int7, Integer int8, Integer int9, Integer int10, Integer int11, Integer int12, Integer int13, Integer int14, Integer int15, Integer int16, Integer int17, Integer int18, Integer int19, Integer int20, Integer int21) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

</error>
    <system-out>
@domain
Scenario Outline: Generate a PUM example like BeeCrowd 1142                                                 &amp;#27;[90m# br/masmangan/beecrowd/bee1142/Pum.feature:39&amp;#27;[0m
  &amp;#27;[32mGiven &amp;#27;[0m&amp;#27;[32mA number of output lines &amp;#27;[0m&amp;#27;[32m&amp;#27;[1m7&amp;#27;[0m                                                                          &amp;#27;[90m# br.masmangan.beecrowd.bee1142.PumSteps.number_is(int)&amp;#27;[0m
  &amp;#27;[32mWhen &amp;#27;[0m&amp;#27;[32mPum is calculated&amp;#27;[0m                                                                                    &amp;#27;[90m# br.masmangan.beecrowd.bee1142.PumSteps.pum_is_calculated()&amp;#27;[0m
  &amp;#27;[33mThen &amp;#27;[0m&amp;#27;[33mresult should be 1 2 3 PUM 5 6 7 PUM 9 10 11 PUM 13 14 15 PUM 17 18 19 PUM 21 22 23 PUM 25 26 27 PUM&amp;#27;[0m &amp;#27;[90m# null&amp;#27;[0m
</system-out>
  </testcase>
  <testcase classname="Pum" name="Generate a PUM example like BeeCrowd 1142 #3" time="0.015">
    <error message="The step &apos;result should be 1 2 3 PUM 5 6 7 PUM 9 10 11 PUM&apos; is undefined.
You can implement this step using the snippet(s) below:

@Then(&quot;result should be {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM&quot;)
public void result_should_be_pum_pum_pum(Integer int1, Integer int2, Integer int3, Integer int4, Integer int5, Integer int6, Integer int7, Integer int8, Integer int9) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
" type="io.cucumber.junit.UndefinedStepException">io.cucumber.junit.UndefinedStepException: The step &apos;result should be 1 2 3 PUM 5 6 7 PUM 9 10 11 PUM&apos; is undefined.
You can implement this step using the snippet(s) below:

@Then(&quot;result should be {int} {int} {int} PUM {int} {int} {int} PUM {int} {int} {int} PUM&quot;)
public void result_should_be_pum_pum_pum(Integer int1, Integer int2, Integer int3, Integer int4, Integer int5, Integer int6, Integer int7, Integer int8, Integer int9) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

</error>
    <system-out>
@domain
Scenario Outline: Generate a PUM example like BeeCrowd 1142 &amp;#27;[90m# br/masmangan/beecrowd/bee1142/Pum.feature:40&amp;#27;[0m
  &amp;#27;[32mGiven &amp;#27;[0m&amp;#27;[32mA number of output lines &amp;#27;[0m&amp;#27;[32m&amp;#27;[1m3&amp;#27;[0m                          &amp;#27;[90m# br.masmangan.beecrowd.bee1142.PumSteps.number_is(int)&amp;#27;[0m
  &amp;#27;[32mWhen &amp;#27;[0m&amp;#27;[32mPum is calculated&amp;#27;[0m                                    &amp;#27;[90m# br.masmangan.beecrowd.bee1142.PumSteps.pum_is_calculated()&amp;#27;[0m
  &amp;#27;[33mThen &amp;#27;[0m&amp;#27;[33mresult should be 1 2 3 PUM 5 6 7 PUM 9 10 11 PUM&amp;#27;[0m     &amp;#27;[90m# null&amp;#27;[0m
</system-out>
  </testcase>
  <testcase classname="Bee1142 CLI" name="Run program with input #1" time="0.016"/>
  <testcase classname="Bee1142 CLI" name="Run program with input #2" time="0.018"/>
  <testcase classname="Bee1142 CLI" name="Run program with input #3" time="0.006"/>
</testsuite>